import logging
from datetime import datetime, timedelta
import os
import time
from dotenv import load_dotenv
from king_of_information import main
import telebot
import threading
import json
from telebot import types

load_dotenv()

TGBOT_TOKEN = os.getenv('TGBOT_TOKEN_PARSER')
# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = TGBOT_TOKEN
CHAT_ID = '791208536'
bot = telebot.TeleBot(BOT_TOKEN)

is_parsing = False
stop_parsing = False
CHECK_ITEMS_FILE = "check_items.json"

def load_check_items():
    if not os.path.exists(CHECK_ITEMS_FILE):
        return []
    with open(CHECK_ITEMS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_check_items(items):
    with open(CHECK_ITEMS_FILE, "w", encoding="utf-8") as f:
        json.dump(items, f, ensure_ascii=False, indent=2)

def add_item_to_file(item_name):
    items = load_check_items()
    if item_name in items:
        return False
    items.append(item_name)
    save_check_items(items)
    return True

def remove_item_from_file(item_name):
    items = load_check_items()
    if item_name not in items:
        return False
    items.remove(item_name)
    save_check_items(items)
    return True

from telebot import types

@bot.message_handler(commands=["start"])
def cmd_start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    # –†—è–¥—ã —Å –ø–æ 2 –∫–Ω–æ–ø–∫–∏
    row1 = [
        types.KeyboardButton("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞"),
        types.KeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥")
    ]
    row2 = [
        types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç"),
        types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
    ]

    # –û—Ç–¥–µ–ª—å–Ω–∞—è —à–∏—Ä–æ–∫–∞—è –∫–Ω–æ–ø–∫–∞
    show_btn = types.KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    markup.row(*row1)
    markup.row(*row2)
    markup.add(show_btn)  # –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é —Å—Ç—Ä–æ–∫—É

    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞")
def handle_parse(message):
    global is_parsing, stop_parsing
    if is_parsing:
        bot.reply_to(message, "‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∏–¥—ë—Ç. –ü–æ–¥–æ–∂–¥–∏...")
        return

    is_parsing = True
    stop_parsing = False
    bot.reply_to(message, "üöÄ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ‚Äî /stop_parse")

    def loop_task():
        global is_parsing, stop_parsing
        try:
            while not stop_parsing:
                bot.send_message(message.chat.id, f"üî• –ù–æ–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {time.ctime()}")
                check_items = load_check_items()
                main(check_items)
                # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6 —á–∞—Å–æ–≤)
                for _ in range(6*60):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                    if stop_parsing:
                        break
                    time.sleep(60)
        finally:
            is_parsing = False
            bot.send_message(message.chat.id, "üõë –ü–∞—Ä—Å–∏–Ω–≥ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    threading.Thread(target=loop_task, daemon=True).start()

@bot.message_handler(func=lambda m: m.text == "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥")
def handle_stop(message):
    global is_parsing, stop_parsing
    if not is_parsing:
        return bot.reply_to(message, "–ü–∞—Ä—Å–∏–Ω–≥ –∏ —Ç–∞–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
    stop_parsing = True
    bot.reply_to(message, "‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–∞—Ä—Å–∏–Ω–≥, —Å–µ–π—á–∞—Å –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è‚Ä¶")

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
def cmd_add_start(message):
    # –®–∞–≥ 1: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å
    msg = bot.reply_to(message, "‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: Weapon name | Skin name")
    # –∏ –≥–æ–≤–æ—Ä–∏–º –±–æ—Ç—É, —á—Ç–æ **—Å–ª–µ–¥—É—é—â–µ–µ** —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é process_add
    bot.register_next_step_handler(msg, process_add_item)

def process_add_item(message):
    item = message.text.strip()
    if '|' not in item:
        return bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –Ω—É–∂–Ω–æ ‚ÄúWeapon name | Skin name‚Äù. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /add_item")
    if add_item_to_file(item):
        bot.reply_to(message, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ¬´{item}¬ª")
    else:
        bot.reply_to(message, f"‚ö†Ô∏è ¬´{item}¬ª —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")

@bot.message_handler(func=lambda m: m.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
def cmd_remove_start(message):
    msg = bot.reply_to(message, "‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: Weapon name | Skin name")
    bot.register_next_step_handler(msg, process_remove_item)

def process_remove_item(message):
    item = message.text.strip()
    if '|' not in item:
        return bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π ‚ÄúWeapon name | Skin name‚Äù –∏ –∫–æ–º–∞–Ω–¥—É /remove_item –∑–∞–Ω–æ–≤–æ.")
    if remove_item_from_file(item):
        bot.reply_to(message, f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: ¬´{item}¬ª")
    else:
        bot.reply_to(message, f"‚ùå ¬´{item}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")

@bot.message_handler(func=lambda m: m.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
def cmd_show(message):
    items = load_check_items()
    if not items:
        bot.reply_to(message, "üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    else:
        text = "üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n" + "\n".join(f"‚Ä¢ {i}" for i in items)
        bot.reply_to(message, text)

if __name__ == "__main__":
    bot.infinity_polling()
